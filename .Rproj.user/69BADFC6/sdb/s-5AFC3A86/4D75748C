{
    "contents" : "---\ntitle       : Finishing up reshape, dplyr\nsubtitle    : \nauthor      : \njob         : \nframework   : io2012        # {io2012, html5slides, shower, dzslides, ...}\nhighlighter : highlight.js  # {highlight.js, prettify, highlight}\nhitheme     : tomorrow      # \nwidgets     : []            # {mathjax, quiz, bootstrap}\nmode        : selfcontained # {standalone, draft}\nknit        : slidify::knit2slides\n---\n\n## reshape2 package\n* Reshape2 is based on two functions\n* melt takes wide-format data and melts it into long-format data.\n* dcast takes long-format data and casts it into wide-format data.\n\n---\n## melting data\n* Have a dataset that we want to \"melt\", so that all outcome measures are stacked\n\n```{r}\ndata <- read.table('http://www.ats.ucla.edu/stat/r/faq/hsb2.csv', header=T, sep=\",\")\nhead(data,5)\n```\n\n---\n## melting data\n```{r}\nlibrary(reshape2)\nmelteddata <- melt(data,id.vars = 1:6)\nhead(melteddata,10)\n```\n\n---\n## melting data\n```{r}\nlibrary(ggplot2)\nggplot(melteddata,aes(x=prog,y=value,group=prog))+geom_boxplot()+facet_wrap(~variable)\n```\n\n---\n## recasting data\n```{r}\nbacktowide <- dcast(melteddata,formula = id+female+race+ses+schtyp+prog~variable)\n```\n\n---\n## recasting data\n```{r}\nbacktowide_byrace <- dcast(melteddata,formula = race~variable,fun.aggregate = mean)\nbacktowide_byrace\n```\n---\n## recasting data\n```{r}\nbacktowide_byraceses <- dcast(melteddata,formula = race+ses~variable,fun.aggregate = mean)\nbacktowide_byraceses\n```\n\n---\n## Exercises \n1. datasets:EuStockMarkets is a dataset in wide format that lists the closing prices for 4 EU stock markets\n  * Create a plot with 4 lines that tracks closing prices by date.\n2. \n\n\n1. Melt the `airquality` data into long form, so that each of the measurements are in one column.\nairquality\n2. create a ggplot that tracks each measurement in a different facet.\n3. Recode the variable name with more descriptive labels, and change the order of the variable so that the order that appear in the legend are reversed. One way to do this is with the factor() function.  \n4. cast the new data frame so you get yearly measurements in wide format.\n\n---\n## dplyr\n```\ninstall.packages(\"dplyr\")\nlibrary(dplyr)\nflights <- tbl_df(read.csv(url(\"http://cdn.rawgit.com/ylelkes/R_wav/master/data/flights.csv\")))\n```\n```{r,echo=FALSE,warning=F,results=F,cache=TRUE}\nlibrary(dplyr)\nflights <- tbl_df(read.csv(url(\"https://cdn.rawgit.com/ylelkes/R_wav/master/data/flights.csv\")))\n\n```\n\n\n1. Most useful package (for me) in R. \n2. Another St. Wickham creation. \n3. A tool for data exploration and transformation\n\n---\n## 5 verbs\n* filter: keep rows matching criteria\n* select: pick columns by name\n* arrange: reorder rows \n* mutate: add new variables\n* summarise: reduce variables to values\n\n--- \n## What is our general m.o. if wanted rows 1,3, & 4?\n```{r}\ndf <- data.frame(   color = c(\"blue\", \"black\", \"blue\", \"blue\", \"black\"),    value = 1:5)\nhead(df)\n```\n\n--- \n## What if we just wanted the \"color\" column\n\n--- \n## What if we just wanted the \"color\" column\n```{r}\nselect(df,color)\n```\n\n--- \n## Or if we didn't want the \"color\" column\n\n--- \n## Or if we didn't want the \"color\" column\n```{r}\nselect(df,-color)\n```\n\n--- \n## Take a look at the handout\n```{r}\nnames(flights)\n```\n* What are some ways of selecting columns \"dep_delay\" and \"arr_delay\"\n\n---\n## Selecting _delay\n\n```\nselect(flights, arr_delay, dep_delay)\nselect(flights, arr_delay:dep_delay)\nselect(flights, ends_with(\"delay\"))\nselect(flights, contains(\"delay\"))\n```\n\n---\n## Arrange \n\n```{r}\narrange(df,value)\n```\n\n---\n## Arrange \n\n```{r}\narrange(df,desc(value))\n```\n\n---\n## Exercises \n* Order the flights by departure date and time.\n* Which flights were most delayed?\n* Which flights caught up the most time during the flight?\n\n---\n## Exercises\n* arrange(flights, date, hour, minute) \n* arrange(flights, desc(dep_delay))\n* arrange(flights, desc(arr_delay))\n* arrange(flights, desc(dep_delay - arr_delay))\n\n\n---\n## Arrange \n\n```{r}\nmutate(df,double= 2* value)\n```\n\n---\n## Arrange \n\n```{r}\nmutate(df,double= 2* value,quadruple=2*double)\n```\n\n---\n## Exercises\n* Compute speed in mph from time (in minutes) and distance (in miles).\n* Which flight flew the fastest?\n* Add a new variable that shows how much time was made up or lost in flight.\n\n---\n## Grouped Summaries\n```{r}\nsummarise(df,total=sum(value))\n```\n\n---\n## Grouped Summaries\n```{r}\nby_color <- group_by(df,color)\nsummarise(by_color,total=sum(value))\n```\n\n---\n## Grouped summaries\n* by_date <- group_by(flights, date)\n* by_hour <- group_by(flights, date, hour)\n* by_plane <- group_by(flights, plane)\n* by_dest <- group_by(flights, dest) \n\n---\n## Summary functions\n* min(x), median(x), max(x), quantile(x, p)\n* n(), n_distinct(), sum(x), mean(x) \n* sum(x > 10), mean(x > 10) \n* sd(x), var(x), iqr(x), mad(x)\n\n---\n## How might you summarise dep_delay for each day? \n```{r,echo=F}\nlibrary(ggplot2)\nggplot(flights,aes(dep_delay))+geom_histogram()\n```\n\n---\n## Summarise by date\n\n```\nby_date <- group_by(flights, date)\ndelays <- summarise(by_date,   \nmean = mean(dep_delay, na.rm = TRUE), \nmedian = median(dep_delay, na.rm = TRUE),\nq75 = quantile(dep_delay, 0.75, na.rm = TRUE),\nover_15 = mean(dep_delay > 15, na.rm = TRUE),\nover_30 = mean(dep_delay > 30, na.rm = TRUE),\nover_60 = mean(dep_delay > 60, na.rm = TRUE)  )\n```\n\n---\n## Summarise by date\n```\nby_date <- group_by(flights, date)\nno_missing <- filter(flights, !is.na(dep))\ndelays <- summarise(by_date,   \nmean = mean(dep_delay, na.rm = TRUE), \nmedian = median(dep_delay, na.rm = TRUE),\nq75 = quantile(dep_delay, 0.75, na.rm = TRUE),\nover_15 = mean(dep_delay > 15, na.rm = TRUE),\nover_30 = mean(dep_delay > 30, na.rm = TRUE),\nover_60 = mean(dep_delay > 60, na.rm = TRUE)  )\n```",
    "created" : 1443081767400.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3524725914",
    "id" : "4D75748C",
    "lastKnownWriteTime" : 1442931784,
    "path" : "~/Dropbox/R_wav/week4-a/index.Rmd",
    "project_path" : "week4-a/index.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}